# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot = {
    loader = {
      grub = {
        enable = true;
        devices = ["nodev"];
        efiSupport = true;
        useOSProber = true;
        configurationLimit = 42;
      };
      efi.canTouchEfiVariables = true;
    };

    initrd = {
      availableKernelModules = ["xhci_pci" "nvme" "thunderbolt" "usb_storage" "sd_mod" "rtsx_pci_sdmmc"];

      # kernelModules = [""];

      # luks.devices = {
      #   "luks-8d6e3c4d-a9b5-4147-ab1c-e9f8fa040d73".device = "/dev/disk/by-uuid/8d6e3c4d-a9b5-4147-ab1c-e9f8fa040d73";
      #
      #   "luks-22e79119-15ce-4d08-ad00-e751f17ab2d4".device = "/dev/disk/by-uuid/22e79119-15ce-4d08-ad00-e751f17ab2d4";
      # };

      luks.devices = { 
        cryptroot.device = "/dev/disk/by-uuid/8d6e3c4d-a9b5-4147-ab1c-e9f8fa040d73";
      };
    };


    kernelModules = ["kvm-intel" "v4l2loopback"];

    extraModulePackages = [pkgs.linuxPackages.v4l2loopback];

    extraModprobeConfig = ''
      options v4l2loopback devices=1 video_nr=1 card_label="OBS Cam" exclusive_caps=1
    '';

    kernel.sysctl = {
      "kernel.perf_event_paranoid" = -1;
      "kernel.kptr_restrict" = lib.mkForce 0;
    };
  };

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/d734ed07-0c87-4ccd-b318-34887c36a295";
      fsType = "ext4";
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/C4FA-7F70";
      fsType = "vfat";
      options = ["fmask=0022" "dmask=0022"];
    };
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/fa9b4b4e-e4ee-489b-93da-c5ebbc44ef43";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware = {
    cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

    nvidia = {
      modesetting.enable = true;
      powerManagement = {
        enable = true;
        finegrained = false;
      };

      open = false;

      nvidiaSettings = true;

      # prime = {
      #   intelBusId = "PCI:0:2:0";
      #
      #   offload = {
      #     enable = true;
      #     enableOffloadCmd = true;
      #   };
      # };
    };

    graphics = {
      enable = true;
      enable32Bit = true;

      extraPackages = with pkgs; [
      ];

      extraPackages32 = with pkgs; [
      ];
    };

    bluetooth = {
      enable = true;
      powerOnBoot = true;
    };

    opentabletdriver = {
      enable = true;
      daemon.enable = true;
    };

    keyboard = {
      qmk.enable = true;
    };
  };

  systemd.services.lactd.enable = true;

  services = {
    xserver.videoDrivers = ["nvidia"];
    devmon.enable = true;
    gvfs.enable = true;
    udisks2.enable = true;
  };
}
